#!/bin/bash 
######################################
#            Shell script            #
# Author: H.L.                       #
# TPL Version: 0.1                   #
######################################

#========================Global variables
APPVER="0.1b"
MYDIR=`echo $0`
MYREALDIR=`readlink $MYDIR`
if [ ! -z $MYREALDIR ]; then  MYDIR=$MYREALDIR;  fi;
FILENAME=`echo $MYDIR|rev|cut -d / -f 1|rev`
MYDIR=${MYDIR%%/$FILENAME}
#=======================Include base library

. /etc/system.conf
. $srvDIR/_dev_system/functions

CLIENTIP=$(get_ssh_ip)
CONFDIR=$srvCONFDIR/system/vpn

echo -e "${COLOR_LIME}$FILENAME, $APPVER.... ${COLOR_END}"
#echo -e "${COLOR_RED}Client ip: ${CLIENTIP} ${COLOR_END}"



#=====================main functions
#help about using of script
help(){
  echo $"Usage: $FILENAME {start|stop|list|help} {profile}"
}

#base actions
#$1 action
#$2 name
do_actions(){
 PROXY=$2
 if [ ! -e $CONFDIR/$PROXY ]; then
  write_error "[!] Proxy profile $2 not found."
  return 1
 else
  write_info "Using profile $2..."
 fi

  include "$CONFDIR/$PROXY"

  case "$1" in
    start)     
     if [ "$PROXY" == "" ]; then
       write_error "[!] No profile passed"
       return 1
     fi
     route_client $ROUTETABLE $ROUTEDEV $ROUTEGW $VPNTYPE
    ;;  
    stop)
     if [ "$PROXY" == "" ]; then 
       write_error "[!] No profile passed"
       return 1
     fi
     unroute_client $ROUTETABLE $ROUTEDEV $ROUTEGW $VPNTYPE
     ;;
    list)
      if [ "$PROXY" == "" ]; then
        list_all
      else
        list $ROUTETABLE $ROUTEDEV $ROUTEGW
      fi
     ;;
    *)
    help
  esac
}

#====================================

# 1:  routetable
# 2:  routedev
# 3:  routegw
# 4:  vpntype
route_client(){
 ROUTETABLE=$1
 ROUTEDEV=$2
 ROUTEGW=$3
 VPNTYPE=$4
 case "$VPNTYPE" in
 vpnc)
   #routetable - path to configuration file
   #routedev - vpnc eth name
   #routegw - config file name
    run "cp /etc/resolv.conf /tmp/resolv" "backup dns resolv file" 
    switch_dir "$ROUTETABLE"
    run "vpnc $ROUTEGW" "@simple"
    switch_dir
    run "iptables -t nat -A POSTROUTING --out-interface $ROUTEDEV -j MASQUERADE" "Apply route"
    run "mv --force /tmp/resolv /etc/resolv.conf" "Restore dns resolv"
   ;;
 openvpn)
   run "ip rule add from $CLIENTIP table $ROUTETABLE" "Add source ip"
   run "ip route add default table $ROUTETABLE via $ROUTEGW dev $ROUTEDEV" "Add source rule"
   ;;
 
 esac
}

# 1:  routetable
# 2:  routedev
# 3:  routegw
# 4:  vpntype
unroute_client(){
 ROUTETABLE=$1
 ROUTEDEV=$2
 ROUTEGW=$3
 VPNTYPE=$4
 case "$VPNTYPE" in
 vpnc)
   #routetable - path to configuration file
   #routedev - vpnc eth name
   #routegw - config file name 
   run "iptables -t nat -D POSTROUTING --out-interface $ROUTEDEV -j MASQUERADE" "Disable routing"
   switch_dir "$ROUTETABLE"
   run "vpnc-disconnect" "Stop vpnc"
   switch_dir
   ;;
 openvpn)
   run "ip route del default table $ROUTETABLE via $ROUTEGW dev $ROUTEDEV" "Del source rule"
   run "ip rule del from $CLIENTIP table $ROUTETABLE" "Del source ip"
  ;;
 esac
}

# 1:  routetable
# 2:  routedev
# 3:  routegw
# 4:  vpntype
list(){
 ROUTETABLE=$1
 ROUTEDEV=$2
 ROUTEGW=$3
  
 case "$VPNTYPE" in
 openvpn)
   #Help: get list of rules| select only required|select only ip of clients|replace newline to #
   LIST=`ip rule list|grep $ROUTETABLE|grep -o -P '(\d{1,3}\.)+\d{1,3}'|sed -e ':a;N;$!ba;s/\n/#/g'`
   switch_delimiter '#'
   CN=0
   ISLIVE=
   for item in $LIST; do
     ping -c 1 -W 1 -q $item 1>/dev/null 2>$1
     if [ ! $? -eq 0 ]; then 
      ISALIVE="(posibly dead)"
     else
      ISALIVE=
     fi
     write_item "$CN" "$item $ISALIVE"
     CN=$((CN+1))
   done
   switch_delimiter
 
   #ip route list table $ROUTETABLE
   ;;
 vpnc)
   TMPPID=`ps -A|grep vpnc|cut -f 1 -d " "`
   if [ "$TMPPID" != "" ]; then
     write_item "vpnc" "active"
   fi
   ;;
 esac
 
}

#list available profiles
list_all(){
 echo  
 list=`ls $CONFDIR`
 for item in $list
 do
  write_header "Active - $item"
  include $CONFDIR/$item
  list $ROUTETABLE $ROUTEDEV $ROUTEGW $VPNTYPE
 done
}



#===================================check params

case "$1" in
  help)
  help
  ;;
  *)
  do_actions "$1" "$2"
esac


