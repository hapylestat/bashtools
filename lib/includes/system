#!/bin/bash

#Global variables
RUNLOG=/tmp/run_appoutput
LASTCMD=""
LASTSTATUS=0
GLOBALSTATUS=0


# ==> Run command with status tracking
# $1 - comamnd to start
# $2 - 0 -disable status and enable app output, @simple - "just run as is",  OR print status text (used if exists)
# $3 - username, in which context command should be started
run(){
 LASTCMD=$1
 #---------test status variable to exists or 0 set. in both variants status is disabled.
 
 EXEC=$1
 NAME=$2
 USER=$3
 
 if [ ! -z $3 ]; then
   EXEC="sudo -H -u $3 $EXEC"
   NAME="$NAME (under $USER)"
 fi
 
 if [ "$2" != "null" ] && [ ! -z "$2" ]; then
  echo -n "$NAME..........."
 fi

 if [ "$2" == "null" ]; then
  eval $EXEC
 else
  eval $EXEC >$RUNLOG 2>&1 
 fi

 LASTSTATUS=$?
 GLOBALSTATUS=$(($GLOBALSTATUS+$LASTSTATUS))
 
  if [ "$2" != "null" ] && [ ! -z "$2" ]; then
   status_check "$NAME"
  fi
  
 return $?
}

# ==> Run command from system sub-folder
# $1 - comamnd to start
# $2 - print status test (used if exists)
script(){
 run "${MYDIR}/$1" "$2"
}

# ==> show status of last run command
# $1 - description to show
# $2 - switch description visibility (if set then true)
status_check(){
 RETSTAT=$LASTSTATUS
 #check app log availability, and if status is ok 0 remove it
 if [ $LASTSTATUS -eq 0 ] && [ -e $RUNLOG ]; then
   rm -f $RUNLOG 
 fi
 
 if [ ! -z $2 ]; then
   MSG="$1..........." 
 fi
 if [ $RETSTAT = 0 ]; then
   echo -e "$MSG[$COLOR_LIME OK $COLOR_END]"
 else
   echo -e "$MSG[$COLOR_RED FAILED $COLOR_END]"
 fi
 
 #check, if application start failed...
  if [ -e $RUNLOG ]; then
    #ToDo: add silent flag or so on, to give more options for output
    if [ $LASTSTATUS -gt 0 ] && [ $EXITONERROR -eq 1 ]; then
      echo -ne "Task '$1' echo: ${COLOR_RED}"
      cat $RUNLOG
      echo -e "${COLOR_END}"    
    fi
  #cleanup
   rm -f $RUNLOG 
  fi
  
   #check, if appears critical error
   if [ $EXITONERROR -eq 1 ] && [ $LASTSTATUS -gt 0 ]; then
    echo -e "${COLOR_RED}[!]${COLOR_END} Critical error appears, exiting..."    
    break;
  fi
}

# => last log string
function get_current_lastlog(){
  include strings
  user=$(id -un)
  data=$(last -i | sed -n 2p)
  curr=" "
  if [ "$data" == "" ]; then
   data=$(last -i | sed -n 1p)
   curr="(current)"
  fi
  ip=$(str_item "$data" " " 3)
  hst=`nslookup $ip | grep "name ="`
  hst="${hst#* =}"
  echo "from \"$ip($hst)\" at $(str_item "$data" " " 7) on $(str_item "$data" " " 4)  $(str_item "$data" " " 5)/$(str_item "$data" " " 6) using login \"$(str_item "$data" " " 1)"\" ${curr}

}


#install systemd service
# $1 - name
# $2 - path to launch string
# $3 - service type, leave blank to be simple (simple,forking)

service_install(){
 TMPFILE=/lib/systemd/system/$1.service
 STYPE="simple"
 if [ ! -z $3 ]; then 
  STYPE=$3
 fi
 rm -f $TMPFILE
 echo  "[Unit]" >> $TMPFILE
 echo  "Description=$1 service" >>  $TMPFILE
 echo  "After=syslog.target network.target" >> $TMPFILE
 echo >>$TMPFILE
 echo "[Service]" >>$TMPFILE
 
 echo "Type=$STYPE" >>$TMPFILE
 echo "ExecStart=$2" >>$TMPFILE
 if [ "$STYPE" == "oneshot" ]; then
  echo "RemainAfterExit=yes" >> $TMPFILE
 else
  echo "ExecReload=/bin/kill -s HUP \$MAINPID" >>$TMPFILE
  echo "ExecStop=/bin/kill -s QUIT \$MAINPID" >>$TMPFILE
 fi
 echo >>$TMPFILE
 echo "[Install]" >>$TMPFILE
 echo "WantedBy=multi-user.target" >>$TMPFILE

 ln -s $TMPFILE /etc/systemd/system/$1.service

 systemctl daemon-reload

}


#
#extract ip from SSH_CLIENT Variable if exists
#return result via $(get_ssh_ip)
#
function get_ssh_ip(){
 ip="terminal login"
 if [ ! -z "$SSH_CLIENT" ]; then
  ip=$SSH_CLIENT
  ip=${ip%% *}
  
 fi
 return_s $ip
}

